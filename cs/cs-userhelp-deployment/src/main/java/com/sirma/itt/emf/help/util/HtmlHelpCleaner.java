/**
 * Copyright (c) 2012 15.01.2012 , Sirma ITT. /* /**
 */
package com.sirma.itt.emf.help.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;

import org.apache.commons.io.IOUtils;

import com.sirma.itt.emf.help.PropertyConfigsWrapper;

/**
 * The Class cleans the html pages from data that is not necessary.
 *
 * @author Borislav Banchev
 */
public class HtmlHelpCleaner {

	private String externalPrefixForProject = PropertyConfigsWrapper.getInstance().getProperty(
			"project.url.confluence");

	private String externalPrefixBase = PropertyConfigsWrapper.getInstance().getProperty(
			"base.url.confluence");

	private String customFooter = PropertyConfigsWrapper.getInstance().getProperty(
			"help.footer.custom");

	private static final String TABLE_FOOTER = "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">";
	/** The Constant DIV_CLOSE. */
	private static final String DIV_CLOSE = "</div>";

	/** The Constant TABLE_CLOSE. */
	private static final String TABLE_CLOSE = "</table>";
	/**
	 * attachments div.
	 */
	private static final String DIV_CLASS_ATTACHMENTS = "<div class=\"greybox\" align=\"left\">";
	/**
	 * attachments title div.
	 */
	private static final String DIV_CLASS_TABLETITLE = "<div class=\"tabletitle\">";
	/**
	 * Comment for DIV_CLASS_PAGESUBHEADING.
	 */
	private static final String DIV_CLASS_PAGESUBHEADING = "<div class=\"pagesubheading\">";

	/** The Constant REGEX_TIMESTAMP. */
	private static final String REGEX_TIMESTAMP = "\\s*<tr>\\s*<td align=\"center\"><font color=\"grey\">Document generated by Confluence on [\\w:,\\s]*</font></td>\\s*</tr>";

	/** The store location. */
	private File storeLocation;

	/** The html location. */
	private File htmlLocation;

	/**
	 * The main method.
	 *
	 * @param args
	 *            the arguments [0] - the main store location [1] - the html files sub directory
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException {
		File rootDir = new File(args[0]);
		HtmlHelpCleaner indexToTOCFileGenerator = new HtmlHelpCleaner();
		indexToTOCFileGenerator.setStoreLocation(rootDir);
		File file = new File(args[1]);
		indexToTOCFileGenerator.setHTMLLocation(file);
		indexToTOCFileGenerator.generate();
	}

	/**
	 * Replace external link.
	 *
	 * @param line
	 *            the is the string that holds possible links
	 * @return the resulted string
	 */
	public String replaceExternalLink(String line) {
		int start = line.indexOf(externalPrefixForProject);
		if (start == -1) {
			return line;
		}
		int externalLinkLength = externalPrefixForProject.length();
		start += externalLinkLength;
		StringBuilder replacmentString = new StringBuilder();
		int index = start;
		while (line.charAt(index) != '"') {
			replacmentString.append(line.charAt(index));
			index++;
		}
		String replaceable = replacmentString.toString();
		String newName = replaceable.replaceAll("[\\+\\s]", "").toLowerCase() + ".html";
		String result = line.substring(0, start - externalLinkLength) + newName
				+ line.substring(index);
		return replaceExternalLink(result);
	}

	/**
	 * Sets the hTML location.
	 *
	 * @param file
	 *            the new hTML location
	 */
	private void setHTMLLocation(File file) {
		htmlLocation = file;
	}

	/**
	 * Travers html files and clean them.
	 *
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 */
	public void generate() throws IOException {
		assert htmlLocation != null;
		String[] list = htmlLocation.list(new FilenameFilter() {

			@Override
			public boolean accept(File dir, String name) {
				return name.endsWith("html");
			}
		});
		for (String string : list) {
			String removeUnnecessaryData = removeUnnecessaryData(string);
			writeBackData(string, removeUnnecessaryData);
		}

	}

	/**
	 * Write back data to the same file.
	 *
	 * @param filename
	 *            is the file name
	 * @param data
	 *            the data is the data to write
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 */
	private void writeBackData(String filename, String data) throws IOException {
		FileWriter fileWriter = null;
		try {
			fileWriter = new FileWriter(new File(htmlLocation, filename));
			fileWriter.append(data);
		} finally {
			if (fileWriter != null) {
				fileWriter.close();
			}
		}

	}

	/**
	 * Removes the unnecessary data.
	 *
	 * @param filename
	 *            is the file name
	 * @return the new content of file
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 */
	private String removeUnnecessaryData(String filename) throws IOException {
		BufferedReader fileReader = null;
		StringBuilder result = new StringBuilder();
		String footer = "";
		try {
			fileReader = new BufferedReader(new FileReader(new File(htmlLocation, filename)));
			String line = null;
			boolean skipReading = false;
			boolean footerReached = false;
			while ((line = fileReader.readLine()) != null) {
				String trimmed = line.trim();
				if (trimmed.equals(DIV_CLASS_PAGESUBHEADING)) {
					skipReading = true;
				} else if (trimmed.equals(DIV_CLASS_TABLETITLE)) {
					skipReading = true;
				} else if (trimmed.equals(DIV_CLASS_ATTACHMENTS)) {
					skipReading = true;
				} else if (skipReading && trimmed.equals(DIV_CLOSE)) {
					skipReading = false;
					continue;
				} else if (trimmed.equals(TABLE_FOOTER)) {
					footerReached = true;
				}
				if (footerReached) {
					line = line.replace(externalPrefixBase, "");
					footer += line;
				} else if (!skipReading) {
					line = replaceExternalLink(line);
					result.append(line + "\r\n");
				}
				if (footerReached && trimmed.equals(TABLE_CLOSE)) {
					footerReached = false;
					footer = footer.replaceAll(REGEX_TIMESTAMP, customFooter);
					result.append(footer);
				}
			}
			return result.toString();
		} finally {
			IOUtils.closeQuietly(fileReader);
		}

	}

	/**
	 * Setter method for storeLocation. Sets the root folder for javahelp files.
	 *
	 * @param storeLocation
	 *            the storeLocation to set
	 */
	public void setStoreLocation(File storeLocation) {
		this.storeLocation = storeLocation;
	}

	/**
	 * Getter method for storeLocation.
	 *
	 * @return the storeLocation
	 */
	public File getStoreLocation() {
		return storeLocation;
	}
}
