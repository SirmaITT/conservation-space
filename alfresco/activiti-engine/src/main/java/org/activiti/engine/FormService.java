/* Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.activiti.engine;

import java.util.Map;

import org.activiti.engine.form.StartFormData;
import org.activiti.engine.form.TaskFormData;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.runtime.ProcessInstanceQuery;


// TODO: Auto-generated Javadoc
/** Access to form data and rendered forms for starting new process instances and completing tasks.
 * 
 * @author Tom Baeyens
 */
public interface FormService {

  /**
   * Retrieves all data necessary for rendering a form to start a new process instance. This can be used to perform rendering of the forms outside of the process engine.
   *
   * @param processDefinitionId the process definition id
   * @return the start form data
   */
  StartFormData getStartFormData(String processDefinitionId);

  /**
   * Rendered form generated by the default build-in form engine for starting a new process instance.
   *
   * @param processDefinitionId the process definition id
   * @return the rendered start form
   */
  Object getRenderedStartForm(String processDefinitionId);

  /**
   * Rendered form generated by the given build-in form engine for starting a new process instance.
   *
   * @param processDefinitionId the process definition id
   * @param formEngineName the form engine name
   * @return the rendered start form
   */
  Object getRenderedStartForm(String processDefinitionId, String formEngineName);
  
  /**
   * Start a new process instance with the user data that was entered as properties in a start form.
   *
   * @param processDefinitionId the process definition id
   * @param properties the properties
   * @return the process instance
   */  
  ProcessInstance submitStartFormData(String processDefinitionId, Map<String, String> properties);
  
  /**
   * Start a new process instance with the user data that was entered as properties in a start form.
   * 
   * A business key can be provided to associate the process instance with a
   * certain identifier that has a clear business meaning. For example in an
   * order process, the business key could be an order id. This business key can
   * then be used to easily look up that process instance , see
   *
   * @param processDefinitionId the id of the process definition, cannot be null.
   * @param businessKey a key that uniquely identifies the process instance in the context or the
   * given process definition.
   * @param properties the properties to pass, can be null.
   * @return the process instance
   * {@link ProcessInstanceQuery#processInstanceBusinessKey(String)}. Providing such a business
   * key is definitely a best practice.
   * 
   * Note that a business key MUST be unique for the given process definition.
   * Process instance from different process definition are allowed to have the
   * same business key.
   */  
  ProcessInstance submitStartFormData(String processDefinitionId, String businessKey, Map<String, String> properties);

  /**
   * Retrieves all data necessary for rendering a form to complete a task.  This can be used to perform rendering of the forms outside of the process engine.
   *
   * @param taskId the task id
   * @return the task form data
   */
  TaskFormData getTaskFormData(String taskId);
  
  /**
   * Rendered form generated by the default build-in form engine for completing a task.
   *
   * @param taskId the task id
   * @return the rendered task form
   */
  Object getRenderedTaskForm(String taskId);

  /**
   * Rendered form generated by the given build-in form engine for completing a task.
   *
   * @param taskId the task id
   * @param formEngineName the form engine name
   * @return the rendered task form
   */
  Object getRenderedTaskForm(String taskId, String formEngineName);
  
  /**
   * Completes a task with the user data that was entered as properties in a task form.
   *
   * @param taskId the task id
   * @param properties the properties
   */  
  void submitTaskFormData(String taskId, Map<String, String> properties);
}
