tinymce.PluginManager.add("idoc_heading_selection", function(editor) {

	var headingTagPattern = /h[0-6]/i;
	var currentlySelected;

	/**
	 * Binds an event listener for the 'document-toc-item-selected'. This event
	 * is thrown when a link is clicked in the navigation tree.
	 */
	function initEvents() {
		idoc.bindGlobalEvent('document-toc-item-selected', selectHeadingEventHandler);
	}
	
    /** Constructs an array with tag names of the headings with equal or smaller number for a given heading */
    function getSmallerOrEqualHeadings(heading) {
    	//collect a list with all elements
    	var smallerOrEqualHeadings = "";
    	var headingNumber = heading.prop("tagName").substring(1);
    	for (var i=1;i<=headingNumber;i++) {
    		smallerOrEqualHeadings = smallerOrEqualHeadings + "H" + i + ",";
    	}
    	
    	return smallerOrEqualHeadings;
    }

	/**
	 * Listen on all click events within TinyMCE. Based on the element clicked
	 * we will search upwards for a heading.
	 */
	editor.on('Click', function(e) {
		if (!e.target) {
			return;
		}

		var target = $(e.target);
		var recursionLimit = 0;
		var heading = findHeading(target, recursionLimit);
		selectHeading(heading);

		if (heading && heading.hasClass('section-placeholder')) {
			var node = document.getSelection().anchorNode;
		    var startNode = (node.nodeType == 3 ? node.parentNode : node);
			tinymce.activeEditor.selection.setCursorLocation(startNode, 0);
		}
	});
	
	// Fix for CMF-4087 I can edit default text from empty section
	editor.on('KeyDown', function(e) {
		var node = document.getSelection().anchorNode; 
		var recursionLimit = 0;
		var heading = findHeading($(node), recursionLimit);
 
		// Allow collapsed section to be deleted - CMF-6450
		if ((e.keyCode == 8 || e.keyCode == 46) && $(node).hasClass('section-placeholder') && $(node).hasClass('idoc-visual-collapsed')) {
         	var smallerOrEqualHeadings = getSmallerOrEqualHeadings(heading);
         	heading.nextUntil(smallerOrEqualHeadings).remove();
         	// REVIEW: not so important but end().remove() can be used
         	heading.remove();
         	
         	idoc.triggerGlobalEvent('document-content-changed', false);
        	e.preventDefault();
        	e.stopPropagation();
		}
		
		if ((e.keyCode == 8 || e.keyCode == 46) && $(node).hasClass('section-placeholder')) {
        	e.preventDefault();
        	e.stopPropagation();
		}
	});
	                    
	editor.on('KeyUp', function(e) {
		if (!e.target) {
			return;
		}
		
		var node = document.getSelection().anchorNode;
		if(node) {
			var startNode = (node.nodeType == 3 ? node.parentNode : node);
		}
	    var recursionLimit = 0;
		var heading = findHeading($(editor.selection.getNode()), recursionLimit);
		selectHeading(heading);
		
		var input = String.fromCharCode(e.keyCode);	
        var style = $(heading).attr("class") || ''; 
        var classList = style.split(/\s+/);

        // TODO: combine this with click function. Two much repeated code...
        $.each( classList, function(index, item){
            if (item == 'section-placeholder') {  
            	if(/[a-zA-Z0-9-_ ]/.test(input)) {
            		heading.text(e.key.toUpperCase());
            		heading.removeClass('section-placeholder');
            		tinymce.activeEditor.selection.setCursorLocation(startNode, 1);
            	} else {
            		heading.text('Empty section');
            		//tinymce.activeEditor.selection.setCursorLocation(startNode, 0);
            	}
            }
        });
	});

	/**
	 * Event handler for the 'document-toc-item-selected'.
	 */
	function selectHeadingEventHandler(e, id) {
		if (id) {
			selectHeading($('#' + id.replace('emf:', 'emf\\:')));
		}
	}

	/**
	 * Selects or deselects a heading in the editor. If the call to
	 * findHeading(...) returns an element - it is selected, otherwise the
	 * selection is removed.
	 */
	function selectHeading(heading) {
		
		if(!heading) {
			return;
		}
		
		if (heading.length) {
			if (currentlySelected) {
				var currentId = currentlySelected.prop('id');
				var newId = heading.prop('id');
				if (currentlySelected.prop('id') === heading.prop('id')) {
					return;
				}
				currentlySelected.removeClass('idoc-visual-heading-selected');
			}
			currentlySelected = heading;
			currentlySelected.addClass('idoc-visual-heading-selected');
			idoc.triggerGlobalEvent('document-heading-selected', currentlySelected.attr('id'));
		} else {
			if (currentlySelected) {
				currentlySelected.removeClass('idoc-visual-heading-selected');
				currentlySelected = null;
				idoc.triggerGlobalEvent('document-heading-remove-selection');
			}
		}
	}

	/**
	 * Recursively searches for a heading tag. It work by checking the siblings
	 * and then the parents siblings and their siblings and so on.
	 */
	function findHeading(element, recursionLimit) {
		if (element.is('.idoc-editor-container, #' + editor.id)) {
			return $({ });
		}
		
		// we might have clicked on a heading
		if (element.is(':header')) {
			return element;
		}
		
		var prev = element.prevUntil('#' + editor.id, ':header').first();
		if (prev.length) {
			return prev;
		}
		
		var parent = element.parent();
		if (parent.is('#' + editor.id)) {
			return prev;
		}

		if(recursionLimit < 100) {
			recursionLimit++;
			return findHeading(parent, recursionLimit);
		}
		
	}

	initEvents();
});