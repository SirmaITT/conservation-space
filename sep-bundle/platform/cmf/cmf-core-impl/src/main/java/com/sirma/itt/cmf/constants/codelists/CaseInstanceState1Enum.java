package com.sirma.itt.cmf.constants.codelists;

/**
 * Състояния на преписка. Codelist number 1.
 *
 * @author autogenerated
 */
public enum CaseInstanceState1Enum {
	/**
	 * Description.
	 * <table border="1">
	 * <tr>
	 * <td>Не създадена</td>
	 * <td>INITIAL</td>
	 * </tr>
	 * </table>
	 */
	INITIAL("INITIAL"),
	/**
	 * Description.
	 * <table border="1">
	 * <tr>
	 * <td>Отворена</td>
	 * <td>OPENED</td>
	 * </tr>
	 * </table>
	 */
	OPENED("OPENED"),
	/**
	 * Description.
	 * <table border="1">
	 * <tr>
	 * <td>Изтрита</td>
	 * <td>DELETED</td>
	 * </tr>
	 * </table>
	 */
	DELETED("DELETED"),
	/**
	 * Description.
	 * <table border="1">
	 * <tr>
	 * <td>Затворена</td>
	 * <td>CLOSED</td>
	 * </tr>
	 * </table>
	 */
	CLOSED("CLOSED"),
	/**
	 * Description.
	 * <table border="1">
	 * <tr>
	 * <td>Архивирана</td>
	 * <td>ARCHIVED</td>
	 * </tr>
	 * </table>
	 */
	ARCHIVED("ARCHIVED");
	/**
	 * Description.
	 * <table border="1">
	 * <tr>
	 * <td>Не създадена</td>
	 * <td>INITIAL</td>
	 * </tr>
	 * </table>
	 */
	public static final String INITIAL_CONST = "INITIAL";
	/**
	 * Description.
	 * <table border="1">
	 * <tr>
	 * <td>Отворена</td>
	 * <td>OPENED</td>
	 * </tr>
	 * </table>
	 */
	public static final String OPENED_CONST = "OPENED";
	/**
	 * Description.
	 * <table border="1">
	 * <tr>
	 * <td>Изтрита</td>
	 * <td>DELETED</td>
	 * </tr>
	 * </table>
	 */
	public static final String DELETED_CONST = "DELETED";
	/**
	 * Description.
	 * <table border="1">
	 * <tr>
	 * <td>Затворена</td>
	 * <td>CLOSED</td>
	 * </tr>
	 * </table>
	 */
	public static final String CLOSED_CONST = "CLOSED";
	/**
	 * Description.
	 * <table border="1">
	 * <tr>
	 * <td>Архивирана</td>
	 * <td>ARCHIVED</td>
	 * </tr>
	 * </table>
	 */
	public static final String ARCHIVED_CONST = "ARCHIVED";

	private final String codevalue;

	/**
	 * Constructor.
	 *
	 * @param codevalue is the code value
	 */
	private CaseInstanceState1Enum(String codevalue) {
		this.codevalue = codevalue;
	}

	/**
	 * Checks if the value is one of the arguments.
	 *
	 * @param enumerations
	 *            all possible arguments
	 * @return true if the value is one of the arguments
	 */
	public boolean in(CaseInstanceState1Enum... enumerations) {
		if (enumerations == null) {
			return false;
		}
		for (CaseInstanceState1Enum enumeration : enumerations) {
			if (enumeration == this) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Code value field.
	 *
	 * @return the code value
	 */
	public String getCodevalue() {
		return codevalue;
	}

	/**
	 * Get the code value enumeration entry.
	 *
	 * @param codevalue is the code value to search for
	 * @return enumeration entry
	 */
	public static CaseInstanceState1Enum getCodevalue(String codevalue) {
		for (CaseInstanceState1Enum cv: CaseInstanceState1Enum.values()) {
			if (cv.getCodevalue().equals(codevalue)) {
				return cv;
			}
		}
		return null;
	}
}