<?xml version="1.0" encoding="UTF-8"?>
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:h="http://java.sun.com/jsf/html">
	
		<h:outputStylesheet name="css/tiny-styles.css"></h:outputStylesheet>
		<h:outputStylesheet name="image-editor/view/image-editor.css"></h:outputStylesheet>
		<h:outputStylesheet name="css/tiny-styles.css"></h:outputStylesheet>
		<h:outputStylesheet name="js/libs/spectrum/spectrum.css"></h:outputStylesheet>
		<h:outputStylesheet name="css/tipTip.css"></h:outputStylesheet>
		<h:outputStylesheet name="image-editor/balloontip/balloontip.css"></h:outputStylesheet>
		<h:outputStylesheet name="js/emf-comments/emf-comments.css"></h:outputStylesheet>
		
		<h:outputScript name="js/idoc-app.js"></h:outputScript>
		<h:outputScript name="js/libs/tinymce/tinymce.min.js"></h:outputScript>
		<script>
			EMF = EMF || {};
			EMF.applicationPath = '#{facesContext.externalContext.requestContextPath}';
			var IMAGE_ID = '#{documentContext.documentInstance.id}';
			var imageId = IMAGE_ID;
			var image = '#{documentAction.getDocumentPreviewURL(documentContext.getDocumentInstance())}';
			var server = '';
			idoc = new Idoc(EMF);
		</script>
		
		<h:outputScript name="js/libs/html2canvas.js"></h:outputScript>
		<h:outputScript name="js/libs/spectrum/spectrum.min.js"></h:outputScript>
		<h:outputScript name="image-editor/custom/custom.js"></h:outputScript>
		<h:outputScript name="image-editor/js-hotkeys/jquery.hotkeys.min.js"></h:outputScript>
		<h:outputScript name="image-editor/jquerybbq/jquery.bbq.min.js"></h:outputScript>
		<h:outputScript name="image-editor/svgicons/jquery.svgicons.js"></h:outputScript>
		<h:outputScript name="image-editor/jgraduate/jquery.jgraduate.min.js"></h:outputScript>
		<h:outputScript name="image-editor/spinbtn/JQuerySpinBtn.min.js"></h:outputScript>
		<h:outputScript name="image-editor/touch.js"></h:outputScript>
		<h:outputScript name="image-editor/contextmenu/jquery.contextMenu.js"></h:outputScript>
		<h:outputScript name="image-editor/browser.js"></h:outputScript>
		<h:outputScript name="image-editor/svgtransformlist.js"></h:outputScript>
		<h:outputScript name="image-editor/math.js"></h:outputScript>
		<h:outputScript name="image-editor/units.js"></h:outputScript>
		<h:outputScript name="image-editor/svgutils.js"></h:outputScript>
		<h:outputScript name="image-editor/sanitize.js"></h:outputScript>
		<h:outputScript name="image-editor/history.js"></h:outputScript>
		<h:outputScript name="image-editor/select.js"></h:outputScript>
		<h:outputScript name="image-editor/draw.js"></h:outputScript>
		<h:outputScript name="image-editor/path.js"></h:outputScript>
		<h:outputScript name="image-editor/svgcanvas.js"></h:outputScript>
		<script>
			svgSpace.rootPath = '#{facesContext.externalContext.requestContextPath}';
			svgSpace.toolPath = '#{facesContext.externalContext.requestContextPath}/image-editor';
		</script>
		<h:outputScript name="image-editor/svg-editor.js"></h:outputScript>
		<h:outputScript name="image-editor/locale/locale.js"></h:outputScript>
		<h:outputScript name="image-editor/contextmenu.js"></h:outputScript>
		<h:outputScript name="image-editor/jgraduate/jpicker.js"></h:outputScript>
		<h:outputScript name="image-editor/balloontip/balloontip.js"></h:outputScript>
		<h:outputScript name="image-editor/view/jquery.ba-throttle-debounce.min.js"></h:outputScript>
		<h:outputScript name="js/libs/jqueryui-editable/js/jqueryui-editable.min.js"></h:outputScript>
		<h:outputScript name="js/libs/jquery.tipTip.js"></h:outputScript>

		<ui:remove>
			TODO: All the inline stuff will be moved in their own files or included in existing ones.
			Please live with it for a while.
		</ui:remove>
	
	
		<h:outputScript name="js/libs/tinymce/tinymce.min.js"></h:outputScript>
		<h:outputScript name="js/libs/angular.js" minified="js/libs/angular.min.js" />
		<h:outputScript name="js/emf-comments/emf-comments.js"></h:outputScript>
		<h:outputScript name="js/emf-comments/emf-comments-directives.js"></h:outputScript>
		<h:outputScript name="js/emf-comments/emf-comments-controllers.js"></h:outputScript>
		<h:outputScript name="js/emf-comments/emf-comments-services.js"></h:outputScript>
		<h:outputScript name="js/idoc-common-filters.js"></h:outputScript>
		<h:outputScript name="js/idoc-common-services.js"></h:outputScript>
		
		<style type="text/css">
			#emf-comments-wrapper {
				margin-top: 10px;
			}
						
			.zoom-level-filters label {
				width: auto !important;
				margin-right: 20px;
			}

			.zoom-level-filters input {
				vertical-align: text-bottom;
			}
		</style>
		
		<script type="text/javascript">
			var allAnnotationShapes = [],
				currentObject = EMF.currentPath[EMF.currentPath.length - 1],
				app = angular.module('app', [ 'emfComments' ]);

			$(document)
				.keyup(function(event) {
					if (!svgSpace.createdItem) {
						return;
					}
					
					// if not ESC, we don't care
					if (event.keyCode !== 27) {
						return;
					}

					$('#' + svgSpace.createdItem).remove();
					svgSpace.createdItem = null;
					svgCanvas.clearSelection();	
				})
				.on('emf-comment:dom:cancel-create-topic', function(event) {
					$('#' + svgSpace.createdItem).remove();
					svgSpace.createdItem = null;
					svgCanvas.clearSelection();	
				});
			
			app.config(['CommentsConfigProvider', function(CommentsConfigProvider) {
	
				CommentsConfigProvider.updateConfig({
					showCreateTopicBtn: false,
					topicDeleteMessage: _emfLabels['comments.delete.annotationMessage'] || '',
				});
			}]);
			
			app.controller('AppController', ['$scope', '$timeout', '$window', '$document', function($scope, $timeout, $window, $document) {
				$scope.idRegex = new RegExp(rsprefix + '[^"\\\']*', 'g')

				$scope.commentsModel = [ { aboutSection: currentObject.id, instanceId: currentObject.id, instanceType: currentObject.type } ];

				$scope.elementId2Topic = { };
				
				$scope.imageLoaded = false;
				$scope.currentSelection = null;

				$scope.zoomLevelFilter = null;
				$scope.zoomLevelFilterType = 'all';

				$scope.createTopic = function() {
					$scope.$broadcast('emf-comments:ng:create-topic', { 
						objectId: currentObject.id
					});
				}

				angular.element($window)
					.on('imageToBeAnnotatedIsLoaded', function() {
						$scope.imageLoaded = true;
					});


				$document.on('iat:dom:zoom-lvl-changed', function() {
					$scope.$apply(function() {
						$scope.onZoomLvlFilterChange();
					});
				});
				
				$scope.onZoomLvlFilterChange = function() {
					switch($scope.zoomLevelFilterType) {
					case 'all':
						$scope.zoomLevelFilter = null;
						break;
					case 'currentLevel':
						$scope.zoomLevelFilter = { shape: { zoomLevel: zoomFactor } };
						break;
					case 'none':
						$scope.zoomLevelFilter = { shape: { zoomLevel: -1 } };
						break;
					default:
						$scope.zoomLevelFilter = null;
						break;
					}
				};
				
				$document
					.on('iat:dom:redraw-annotations', function() {
						var topics = [];
						_.forOwn($scope.elementId2Topic, function(value) {
							topics.push(value);
						});

						$scope.drawAnnotations({ topics: topics });
					})
					.on('iat:save-annotation', function(event, data) {
						var topic = $scope.elementId2Topic[data.elementId];
						
						topic.shape = data.shape;

						$scope.$broadcast('emf-comments:ng:update-topic', topic);
						
					})
					.on('iat:dom:annotation-selected', function(event, annotationId) {
						var topic;
						
						if (annotationId) {
							topic = $scope.elementId2Topic[annotationId];
							if (!topic || !topic.Id) {
								return;
							}
							
							$scope.$apply(function() {
								// $scope.$broadcast('emf-comments:ng:toggle-collapsed', topic);
								$scope.$broadcast('emf-comments:ng:toggle-expand', topic);
							});
						}
					});

				$scope.$on('emf-comments:ng:before-save-topic', function(event, data) {
					var shape, 
						id = svgSpace.createdItem || svgSpace.editItem || svgSpace.selectedItem;
					
					if (!id || !data.shape) {
						return;
					}

					shape = svgSpace.getAnnotationData($document[0].getElementById(id));
					data.shape = shape;
					
				});
				
				$scope.$on('emf-comments:ng:topic-toggle-collapsed', function(event, data) {
					if (!data.collapsed) {
						var shape = data.topic.shape,
							match;
						
						if (shape) {
							match = shape.svgTag.match($scope.idRegex);
							if (match) {
								// custom.js
								select(match[0]);
							}	
						}
					}
				});
				
				$scope.$on('emf-comments:ng:remove-topic', function(event, data) {
					var match,
						element,
						text,
						parent;
					
					if (!data || !data.shape || !data.shape.svgTag) {
						return;
					}

					match = data.shape.svgTag.match($scope.idRegex);
					if (match.length) {
						element = document.getElementById(match[0]);
						text = element.nextElementSibling;
						parent = element.parentElement;
						parent.removeChild(element);
						parent.removeChild(text);

						delete $scope.elementId2Topic[match[0]];
						svgSpace.constructZoomer(null, $scope.elementId2Topic);
					}		
				});

				$scope.$on('emf-comments:ng:topic-created', function(event, data) {
					var shape = data.shape,
						match;
					
					if (!shape || !shape.svgTag) {
						return
					}

					match = shape.svgTag.match($scope.idRegex);
					if (!match || !match.length) {
						return;
					}

					elementId = match[0];
					$scope.elementId2Topic[elementId] = data;
					allAnnotationShapes.push(data);	

					svgSpace.createdItem = null;
					// FIXME: trigger a dom event
					svgCanvas.clearSelection();
					svgSpace.constructZoomer(null, $scope.elementId2Topic);
				});

				$scope.drawAnnotations = function(data) {
					var topics = data.topics,
						object = data.object,
						shapes = [ ],
						svgTag,
						match,
						elementId;

					if (!topics) {
						return;
					}

					_.each(topics, function(topic) {
						if (topic.shape) {
							svgTag = topic.shape.svgTag;
							shapes.push(svgTag);
							match = svgTag.match($scope.idRegex);

							if (!match || !match.length) {
								return;
							}

							elementId = match[0];
							$scope.elementId2Topic[elementId] = topic;
							allAnnotationShapes.push(topic);
						}
					});

					var maxWaitCounter = 0;
					var addShapesTimeout = function() {
						if ($scope.imageLoaded) {
							// custom.js
							addShapes(shapes);
							svgSpace.constructZoomer(null, $scope.elementId2Topic);
						} else {
							if (maxWaitCounter !== 10) {
								maxWaitCounter++;
								$timeout(addShapesTimeout, 1000);
							}
						}
					}
					
					addShapesTimeout();
				}

				$scope.debouncedDrawAnnotations = _.debounce($scope.drawAnnotations, 500);
				
				$scope.$on('emf-comments:ng:topics-changed', function(event, data) {
					$scope.debouncedDrawAnnotations(data);
				});
			}]);

			setTimeout(function() {
				/*
				 * I'm sorry, but this has to be here for now ...otherwise images aren't loaded.
				 */
				onLoad();
			}, 1000);
		</script>
		
		<div data-ng-app="app" data-ng-controller="AppController">
			<div class="zoom-level-filters">
				<label>
					<input type="radio" name="zoomFilter" value="all" 
						data-ng-change="onZoomLvlFilterChange()"
						data-ng-model="zoomLevelFilterType" />
					All
				</label>
				<label>
					<input type="radio" name="zoomFilter" value="currentLevel" 
						data-ng-change="onZoomLvlFilterChange()"
						data-ng-model="zoomLevelFilterType" />
					Only This Level
				</label>
				<label>
					<input type="radio" name="zoomFilter" value="none" 
						data-ng-change="onZoomLvlFilterChange()"
						data-ng-model="zoomLevelFilterType" />
					None
				</label>
			</div>
			<div style="display: inline-block;" data-emf-comments-filter="noop"></div>
			<a class="btn btn-primary btn-sm new-annotation-button dontBlockUI" href="javascript:void(0);" data-ng-click="createTopic()">
				#{label['cmf.comment.topic.create']}
			</a>
			<div>
				<span id="annotations-result-set" style="padding-top: 15px;">The result is {{displayedComments}} out of {{allComments}} comments</span>
			</div>
			<div id="emf-comments-wrapper" 
				data-emf-comments="noop" 
				data-objects="commentsModel" 
				data-order-by-expression="-{{filterCriteria.sortBy}}" 
				data-client-side-filter="zoomLevelFilter">
			</div>
		</div>
		
		<h:outputScript name="image-editor/image-annotation/viewer.js"></h:outputScript>
</ui:composition>
