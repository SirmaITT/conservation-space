<?xml version="1.0" encoding="UTF-8"?>
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:emf="http://com.sirma.itt.emf"
	xmlns:a4j="http://richfaces.org/a4j"
	xmlns:rich="http://richfaces.org/rich">
	
	<ui:include src="/common/confirmation.xhtml">
		<ui:param name="action" value="#{action}" />
		<ui:param name="currentInstance" value="#{currentInstance}" />
		<ui:param name="popupRenderCondition" value="#{action.confirmationMessage != null}" />
	</ui:include>
	<ui:remove><!-- Extension point that allows action button implementations to be provided from other modules --></ui:remove>
	<emf:insertPageFragments point="action.button.extension.point" />
	<ui:remove><!-- default action button template --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.shouldRenderDefaultButton(action, currentInstance)}">
		<a4j:commandLink id="actionLink"
			action="#{actionsManager.executeAllowedAction(action, currentInstance)}"
			onclick="#{onClickAttribute}"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)} blockUI"
			value=""
			immediate="#{action.immediateAction}"
			execute="@this"
			render="@form"
			onbegin="#{onBegin}"
			oncomplete="#{onComplete};"
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>
	
	<ui:remove><!-- action button for create case section for documents and objects --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.renderCreateSectionButton(action, currentInstance)}">
		<a4j:commandLink id="createSectionActionButton"
			action="#{actionsManager.executeAllowedAction(action, currentInstance)}"
			oncomplete="#{rich:component('createCaseSectionPopup')}.show();"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			immediate="#{action.immediateAction}"
			render="closingReasonPopup"
			execute="@this"
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>
	
	<ui:remove><!-- upload document action button template --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.renderUploadButton(action, currentInstance)}">
		<a4j:commandLink id="uploadDocumentButton"
			action="#{actionsManager.executeAllowedAction(action, currentInstance)}"
			oncomplete="CMF.fileUploadNew.init('#{currentInstance.getId()}', '#{currentInstance.getClass().getSimpleName().toLowerCase()}');"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			immediate="#{action.immediateAction}"
			render="@form"
			execute="@this"
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>
	
	<ui:remove><!-- action button for attach document --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.renderAttachDocumentButton(action, currentInstance)}">
		<a4j:commandLink id="attachDocumentActionButton"
			action="#{actionsManager.executeAllowedAction(action, currentInstance)}"
			oncomplete="EMF.search.picker.attachDocument('#{currentInstance.getId()}','#{currentInstance.getClass().getSimpleName().toLowerCase()}');"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			immediate="#{action.immediateAction}"
			render="@none"
			execute="@this"
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>
	
	<ui:remove><!-- action button for detach document --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.renderDetachDocumentButton(action, currentInstance)}">
		<h:outputLink id="detachDocumentActionButton"
			onclick="CMF.action.detachDocument(event, {
				confirmation:'#{action.confirmationMessage}', 
				attachedInstanceId:'#{currentInstance.getId()}', 
				attachedInstanceType:'#{currentInstance.getClass().getSimpleName().toLowerCase()}', 
				targetId:'#{actionContext.getActionTarget().getOwningInstance().getId()}', 
				targetType:'#{actionContext.getActionTarget().getOwningInstance().getClass().getSimpleName().toLowerCase()}'});"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</h:outputLink>
	</h:panelGroup>
	
	<ui:remove><!-- create document action button template --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.renderCreateDocumentButton(action, currentInstance)}">
		<a4j:commandLink id="createDocumentButton" 
			action="#{createDocumentAction.prepare(currentInstance)}" 
			onclick="#{onClickAttribute}"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			immediate="true" 
			execute="@this" 
			render="createDocumentPopup"
			rendered="#{renderCondition}"
			oncomplete="#{rich:component('createDocumentPopup')}.show(); CMF.fileCreateEventHandlers.initFileCreationDialog(#{rich:element('newDocumenType')},#{rich:element('newDocumentManualtitle')},#{rich:element('newDocumentFileName')},#{rich:element('performDocumentCreateButton')},'#{createDocumentAction.defaultDocumentType}');">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>
	
	<ui:remove><!-- case close action button template --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.shouldRenderCaseCloseButton(action, currentInstance)}">
		<a4j:commandLink id="closeCaseActionLink"
			action="#{actionsManager.executeAllowedAction(action, currentInstance)}"
			oncomplete="#{rich:component('closingReasonPopup')}.show();"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			immediate="#{action.immediateAction}"
			render="closingReasonPopup"
			execute="@this"
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>

	<ui:remove><!-- document move in same case --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.shouldRenderDocumentMoveInOtherSectionButton(action, currentInstance)}">
		<a4j:commandLink id="documentMoveActionLink"
			action="#{actionsManager.executeAllowedAction(action, currentInstance)}"
			oncomplete="CMF.action.moveInstance({
				instanceId:'#{currentInstance.getId()}', 
				instanceType:'#{currentInstance.getClass().getSimpleName().toLowerCase()}', 
				contextId:'#{contextInstance != null ? contextInstance.getId(): ''}',
				contextType:'#{contextInstance != null ? contextInstance.getClass().getSimpleName().toLowerCase(): ''}',
				sourceId:'#{currentInstance.getOwningInstance() != null ? currentInstance.getOwningInstance().getId(): ''}', 
				sourceType:'#{currentInstance.getOwningInstance() != null ? currentInstance.getOwningInstance().getClass().getSimpleName().toLowerCase(): ''}'
				}, event);"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)} blockUI"
			value=""
			immediate="#{action.immediateAction}"
			render="@form"
			execute="@this"
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
		
	</h:panelGroup>
	
	<ui:remove><!-- document move in other case --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.shouldRenderDocumentMoveInOtherCaseButton(action, currentInstance)}">
		<a4j:commandLink id="documentMoveOtherCaseActionLink"
			action="#{actionsManager.executeAllowedAction(action, currentInstance)}"
			oncomplete="OBJ.objectsSectionPicker('moveInOtherCase', '#{currentInstance.getId()}', '#{currentInstance.getClass().getSimpleName().toLowerCase()}', '#{currentInstance.getClass().getSimpleName().toLowerCase()}');"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)} blockUI"
			value=""
			render="documentMove"
			execute="@this"
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>
	
	<ui:remove><!-- task reassign action button template --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.shouldRenderTaskReassignButton(action, currentInstance)}">
		<a4j:commandLink id="taskActionLink"
			action="#{actionsManager.executeAllowedAction(action, currentInstance)}"
			limitRender="true"
			disabled="#{action.disabled}"
			render="@none"
			execute="@this"
			oncomplete="CMF.taskReassignEventHandlers.openPicker('#{rich:clientId('taskActionLink')}')"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)} blockUI"
			value=""
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>
	
	<ui:remove><!-- upload new document version action button template --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.shouldUploadNewVersionButton(action, currentInstance)}">
		<a4j:commandLink id="documentUploadNewVersionButton"
			action="#{uploadAction.prepareUpload(currentInstance)}"
			disabled="#{action.disabled}"
			render="uploadNewVersion"
			execute="@this"
			oncomplete="CMF.utilityFunctions.hideIframeAndManageDialogDimensions('previewFrame', true);#{rich:component('uploadNewVersionPanel')}.show();"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>

	<ui:remove><!-- edit offline action buttons template --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.renderEditOfflineButton(action)}">
		<a4j:commandLink id="documentCheckoutAndDownloadButton" 
			action="#{actionsManager.executeAllowedAction(action, currentInstance)}"
			oncomplete="CMF.utilityFunctions.downloadDocumentAfterEvent('#{documentAction.getDocumentDownloadUrl(currentInstance)}');"
			disabled="#{action.disabled}"
			render="@form"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)} blockUI"
			value=""
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>
	
	<ui:remove><!-- download action buttons template --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.renderDownloadButton(action, currentInstance)}">
		<h:outputLink id="documentDownloadURI" disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			target="_blank"
			onclick="CMF.utilityFunctions.downloadDocumentAfterEvent('#{documentAction.getDocumentDownloadUrl(currentInstance)}'); #{rich:element('registerDownloadAction')}.click(); return false;"
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</h:outputLink>
		<a4j:commandLink id="registerDownloadAction" action="#{documentAction.registerDownloadAction(currentInstance)}"
			value="" execute="@this" render="@none" limitRender="true" styleClass="hidden" />
	</h:panelGroup>
	
	<ui:remove><!-- cancel/stop workflow --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.shouldRenderStopButton(action, currentInstance)}">
		<a4j:commandLink id="cancelWorkflowActionLink"
			action="cancelWorkflowTest"
			disabled="#{action.disabled}"
			onclick="#{rich:component('workflowCancelPopup')}.show();"
			execute="@this"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>
	
	<ui:remove><!-- document sign --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.shouldRenderSignButton(action, currentInstance)}">
		<ui:include src="/document/includes/sign.xhtml">
			<ui:param name="currentInstance" value="#{currentInstance}" />
			<ui:param name="actionHandler" value="#{documentSignAction.init(currentInstance)}" />
		</ui:include>
		<a4j:commandLink id="documentSignActionLink"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			execute="@this"
			rendered="#{renderCondition}"
			onclick="startSignApplet(this);">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</a4j:commandLink>
	</h:panelGroup>
	
	<ui:remove><!-- print action buttons template --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.renderPrintButton(action, currentInstance)}">
		<h:outputLink id="printDocument"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			onclick="CMF.action.executePrint('#{currentInstance.getClass().getSimpleName().toLowerCase()}', '#{currentInstance.getId()}'); return false;"
		 	disabled="#{action.disabled}"
			value=""
			target="_blank"
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</h:outputLink>
	</h:panelGroup>
	
	<ui:remove><!-- export action buttons template --></ui:remove>
	<h:panelGroup rendered="#{actionButtonRenderConditions.renderExportDocumentButton(action, currentInstance)}">
		<h:outputLink id="exportDocument"
			onclick="CMF.action.executeExport('#{currentInstance.getClass().getSimpleName().toLowerCase()}','#{currentInstance.getId()}'); return false"
			disabled="#{action.disabled}"
			styleClass="#{actionsManager.getActionStyleClass(btnActionClass, currentInstance, action, minActionsMode)}"
			value=""
			target="_blank"
			rendered="#{renderCondition}">
			<span class="button-label">#{minActionsMode != null ? '' : action.label}</span>
			<div class="tooltip">
				<span>#{action.label}</span>
			</div>
		</h:outputLink>
	</h:panelGroup>
	
	<h:panelGroup rendered="#{actionButtonRenderConditions.renderNoPermissionMessage(action)}" layout="block">
		<a name="nopermissions">#{label['cmf.btn.actions.no_permissions']}</a>
	</h:panelGroup>
	
</ui:composition>
