<definition id="ngaTimedActions" type="timer">
	<fields>

		<!-- Frequently update cultural objects -->
		<field name="updateCulturalObjects" type="an..200" displayType="system">
			<value>
				<![CDATA[
                    // Java object types definition
                    var Calendar = Java.type('java.util.Calendar');
                    var GregorianCalendar = Java.type('java.util.GregorianCalendar');
                    var LinkedList = Java.type('java.util.LinkedList');
                    var Arrays = Java.type('java.util.Arrays');
                    var Locale = Java.type('java.util.Locale');

                    // Object initialization:
                    // Calendar initialization with specified locale - current locale US
                    var calendar = Calendar.getInstance(Locale.US);
                    // StartDate initialization - default current date
                    var from = Calendar.getInstance(Locale.US);
                    from.setTime(calendar.getTime());
                    // EndDate initialization - default current date. It is also customizable like startDate. The customization process is the same like startDate.
                    var to =  Calendar.getInstance(Locale.US);
                    to.setTime(calendar.getTime());
                   
                   
					// From startDate substract 1 day for setting the calendar date to yesterday.
                    // This is customizable. The user can set a week before with (-7 days), month before with (Calendar.MONTH - 1) and etc. 
                    from.add(Calendar.DAY_OF_MONTH, -1);
                    // Search arguments initialization.
                    var searchArguments = search.buildEmptySearchArguments();
                    // Batch size initialization. This variable is used to optimize updating process.
                    var batchSize = 25;
                    // Adding search arguments. Include thumbnails are set to false because they are auto generated by SEIP system.
                    searchArguments.getArguments().put('includeThumbnails', false);
                    searchArguments.getArguments().put('instantiateMissing', false);
                    // Include references are set to false because the SEIP updates only the modified object. 
                    searchArguments.getArguments().put('includeReferences', false);
                    // Setting batchSize optimize updating many objects.
                    searchArguments.setPageSize(batchSize);
                    // Setting context (external source system) from where SEIP will search and update modified objects. 
                    searchArguments.setContext('CMS');
                    // Search tree initialization.
                    var searchTree = new com.sirma.itt.seip.domain.search.model.SearchTree();
                    // Setting search treen condition.
                    searchTree.setCondition("AND");
                    // List initialization which contains the tree rules.
                    var list = new LinkedList();
                    // Tree rule initialization.
                    var treeRule = new com.sirma.itt.seip.domain.search.model.SearchTreeRule();
                    // Setting tree rule operator. E.g "between"" two dates.
                    treeRule.setOperator("between");
                    // Seeting tree rule field. E.g modifiedOn, title
                    treeRule.setField("emf:modifiedOn");
                    // Setting value to tree rule fields.
                    treeRule.setValue(Arrays.asList(from.getTime(), to.getTime()));
                    // Adding tree rule to tree rule list. The SEIP SearchTree can handle multiple tree rules. E.g except with modifiedOn date range, the user can set additional rules for searching (title, accessionNumber and etc.).
                    list.add(treeRule);
                    // Setting search rules.
                    searchTree.setRules(list);
                    // Adding search tree to searchArguments.
                    searchArguments.setSearchTree(searchTree);
                    // Trigger external search with search arguments.
                    eaiScriptService.searchAndImport(searchArguments);
                   
				]]>
			</value>
			<control id="schedulerConfiguration">
                <!-- Cron expression can be generated in http://www.cronmaker.com/   -->
				<control-param id="config" name="cronExpression">0 0 0 1/1 * ? *</control-param>
			</control>
		</field>
	</fields>
</definition>